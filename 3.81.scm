#lang racket

(require "streams.scm")

(define (rand-update x)
  (let ((m 157)
       (a 562)
       (b 286))
    (modulo (+ (* a x) b) m)))

(define random-init 1) ; any number would do

; (define (random-listen requests)
;   (define rands
;     (cons-stream
;       (if (eq? (stream-car requests) 'generate)
;         (rand-update (stream-car random-listen)
;         random-init)
;       (random-listen (stream-cdr requests))))

; (define (random-numbers requests)
;   (random-listen (cons-stream 'reset requests)))


;; elegant implemenation using maps
(define (random-numbers requests)
  (define rands
    (cons-stream 
      random-init
      (stream-map (lambda (num req)
                    (if (eq? req 'generate)
                      (rand-update num)
                       random-init))
                  rands
                  requests)))
  rands)

(define reqs (cons-stream 'generate reqs))

(define z (random-numbers reqs))

(stream-ref z 0)
(stream-ref z 1)
(stream-ref z 2)
(stream-ref z 3)
(stream-ref z 4)
(stream-ref z 5)
(stream-ref z 6)
(stream-ref z 7)
(stream-ref z 8)
(stream-ref z 9)
(stream-ref z 10)
(stream-ref z 11)
(stream-ref z 12)
(stream-ref z 13)
(stream-ref z 14)
(stream-ref z 15)
(stream-ref z 16)
(stream-ref z 17)
(stream-ref z 18)
(stream-ref z 19)
(stream-ref z 20)
(stream-ref z 21)
(stream-ref z 22)
(stream-ref z 23)
(stream-ref z 24)
(stream-ref z 25)
(stream-ref z 26)
(stream-ref z 27)
(stream-ref z 28)
(stream-ref z 29)
(stream-ref z 30)
(stream-ref z 31)
(stream-ref z 32)
(stream-ref z 33)
(stream-ref z 34)
(stream-ref z 35)
(stream-ref z 36)
(stream-ref z 37)
(stream-ref z 38)
(stream-ref z 39)
(stream-ref z 40)
(stream-ref z 41)
(stream-ref z 42)
(stream-ref z 43)
(stream-ref z 44)
(stream-ref z 45)
(stream-ref z 46)
(stream-ref z 47)
(stream-ref z 48)
(stream-ref z 49)
(stream-ref z 50)
(stream-ref z 51)
(stream-ref z 52)
(stream-ref z 53)
(stream-ref z 54)
(stream-ref z 55)
(stream-ref z 56)
(stream-ref z 57)
(stream-ref z 58)
(stream-ref z 59)
(stream-ref z 60)
(stream-ref z 61)
(stream-ref z 62)
(stream-ref z 63)
(stream-ref z 64)
(stream-ref z 65)
(stream-ref z 66)
(stream-ref z 67)
(stream-ref z 68)
(stream-ref z 69)
(stream-ref z 70)
(stream-ref z 71)
(stream-ref z 72)
(stream-ref z 73)
(stream-ref z 74)
(stream-ref z 75)
(stream-ref z 76)
(stream-ref z 77)
(stream-ref z 78)
(stream-ref z 79)
(stream-ref z 80)
(stream-ref z 81)
(stream-ref z 82)
(stream-ref z 83)
(stream-ref z 84)
(stream-ref z 85)
(stream-ref z 86)
(stream-ref z 87)
(stream-ref z 88)
(stream-ref z 89)
(stream-ref z 90)
(stream-ref z 91)
(stream-ref z 92)
(stream-ref z 93)
(stream-ref z 94)
(stream-ref z 95)
(stream-ref z 96)
(stream-ref z 97)
(stream-ref z 98)
(stream-ref z 99)
(stream-ref z 100)
(stream-ref z 101)
(stream-ref z 102)
(stream-ref z 103)
(stream-ref z 104)
(stream-ref z 105)
(stream-ref z 106)
(stream-ref z 107)
(stream-ref z 108)
(stream-ref z 109)
(stream-ref z 110)
(stream-ref z 111)
(stream-ref z 112)
(stream-ref z 113)
(stream-ref z 114)
(stream-ref z 115)
(stream-ref z 116)
(stream-ref z 117)
(stream-ref z 118)
(stream-ref z 119)
(stream-ref z 120)
(stream-ref z 121)
(stream-ref z 122)
(stream-ref z 123)
(stream-ref z 124)
(stream-ref z 125)
(stream-ref z 126)
(stream-ref z 127)
(stream-ref z 128)
(stream-ref z 129)
(stream-ref z 130)
(stream-ref z 131)
(stream-ref z 132)
(stream-ref z 133)
(stream-ref z 134)
(stream-ref z 135)
(stream-ref z 136)
(stream-ref z 137)
(stream-ref z 138)
(stream-ref z 139)
(stream-ref z 140)
(stream-ref z 141)
(stream-ref z 142)
(stream-ref z 143)
(stream-ref z 144)
(stream-ref z 145)
(stream-ref z 146)
(stream-ref z 147)
(stream-ref z 148)
(stream-ref z 149)
(stream-ref z 150)
(stream-ref z 151)
(stream-ref z 152)
(stream-ref z 153)
(stream-ref z 154)
(stream-ref z 155)
(stream-ref z 156)
(stream-ref z 157)
(stream-ref z 158)
(stream-ref z 159)
(stream-ref z 160)
(stream-ref z 161)
(stream-ref z 162)
